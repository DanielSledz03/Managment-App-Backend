generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  completed
  inprogress
  rejected
}

model Company {
  id              Int       @id @default(autoincrement())
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  administrators  User[]    @relation("CompanyAdministrators")
  users           CompanyUser[]

}

model User {
  id                   Int            @id @default(autoincrement())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  name                 String
  email                String         @unique
  hash                 String
  isAdmin              Boolean        @default(false)
  notifications        Notification[] @relation("UserNotifications")
  shifts               Shift[]
  tasks                Task[]
  administeredCompanies Company[]     @relation("CompanyAdministrators")
  companies            CompanyUser[]
  bonuses              Bonus[]
  penalties            Penalty[]
  earningPerHour       Float?
}

model CompanyUser {
  company      Company @relation(fields: [companyId], references: [id])
  companyId    Int
  user         User    @relation(fields: [userId], references: [id])
  userId       Int

  @@id([companyId, userId])
  @@unique([companyId, userId])
}

model Shift {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
}


model Task {
  id              Int        @id @default(autoincrement())
  userId          Int
  user            User       @relation(fields: [userId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  title           String
  description     String?
  status          TaskStatus
  priority        Boolean?
  rejectionReason String?
}

model Notification {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String
  description   String?
  users         User[]    @relation("UserNotifications")
}

model Bonus {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      Float
  description String
  date        DateTime
}

model Penalty {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      Float
  description String
  date        DateTime
}